# -*- coding: utf-8 -*-
from __future__ import annotations

import os
import sys
import time
import random
import yaml
import pytz
import asyncio
import sqlite3
import logging
import requests
from typing import List, Optional, Tuple, Dict
from datetime import datetime

from dotenv import load_dotenv

# Telegram
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import Conflict

# ---- –Ω–∞—à—ñ –¥–∂–µ—Ä–µ–ª–∞ —á–µ—Ä–µ–∑ API –±—ñ—Ä–∂ (–æ–∫—Ä–µ–º–∏–π –º–æ–¥—É–ª—å) ----
from api_sources import (
    ALL_EXCHANGES,            # List[Tuple[str, str]]: [("binance","spot"), ("gate","futures"), ...]
    api_seed_all,             # () -> Dict[(ex, mk) -> Dict[pair->url, ...]]
    api_fetch_snapshot,       # (ex, mk) -> Dict[pair->url, ...]
    api_build_events_from_diff,  # (ex, mk, prev, cur) -> List[Dict(event...)]
    api_now_exchange_iso,     # (ex, mk) -> str | None  (—á–∞—Å –∑ –±—ñ—Ä–∂—ñ —É –≤–∏–≥–ª—è–¥—ñ ISO –∞–±–æ –ª—é–¥–µ–π–Ω–æ)
)

# ----------------------- LOGGING -----------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)
log = logging.getLogger("hornet")

# ----------------------- ENV --------------------------
load_dotenv()

BOT_TOKEN       = os.getenv("BOT_TOKEN", "")
TARGET_CHAT_ID  = os.getenv("TARGET_CHAT_ID", "")
OWNER_CHAT_ID   = os.getenv("OWNER_CHAT_ID", "")

# –¢–∞–π–º–∑–æ–Ω–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ (–º–æ–∂–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—è –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É)
TIMEZONE        = os.getenv("TIMEZONE", "Europe/Kyiv")
TZ              = pytz.timezone(TIMEZONE)

# –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è API (—Å–µ–∫)
API_POLL_SEC    = int(os.getenv("API_POLL_SEC", "180"))

# –°–∫—ñ–ª—å–∫–∏ —Å–µ–∫ —á–µ–∫–∞—Ç–∏ –º—ñ–∂ sendMessage (—â–æ–± –Ω–µ –ª–æ–≤–∏—Ç–∏ 429)
MIN_GAP_BETWEEN_MESSAGES = float(os.getenv("TG_MIN_GAP_SEC", "1.2"))

# ----------------------- DB ---------------------------
DB_PATH = os.getenv("DB_PATH", "state.db")  # –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥—É –∫—Ä–∞—â–µ /data/state.db
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur  = conn.cursor()

# –¢–∞–±–ª–∏—Ü—è –¥–ª—è —Å—Ç–∞—Ä–æ—ó –ª–æ–≥—ñ–∫–∏ –æ–≥–æ–ª–æ—à–µ–Ω—å (–∑–∞–ª–∏—à–∞—î–º–æ, —Ä–∞–ø—Ç–æ–º –ø–æ–≤–µ—Ä–Ω–µ—à—Å—è –¥–æ HTML)
cur.execute("""
CREATE TABLE IF NOT EXISTS seen_announcements(
  url TEXT PRIMARY KEY,
  exchange TEXT,
  market TEXT,
  title TEXT,
  symbols TEXT,
  start_ts INTEGER
)""")

# –ù–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è: —â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞—Ç–∏ API –ø–æ–¥—ñ—ó –º—ñ–∂ —Ä–µ—Å—Ç–∞—Ä—Ç–∞–º–∏
cur.execute("""
CREATE TABLE IF NOT EXISTS seen_pairs(
  exchange TEXT NOT NULL,
  market   TEXT NOT NULL,
  pair     TEXT NOT NULL,
  url      TEXT,
  first_seen_ts INTEGER,
  PRIMARY KEY(exchange, market, pair)
)""")
conn.commit()

# ----------------------- UTILS ------------------------
_last_send_ts = 0.0

def _html(msg: str) -> str:
    """–ü—Ä–æ—Å—Ç–∞ –µ–∫—Ä–∞–Ω—É—é—á–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è HTML parse_mode."""
    import html
    return html.escape(msg, quote=False)

def _send_telegram(chat_id: str, text: str, parse_mode: str = "HTML",
                   disable_preview: bool = True, max_retries: int = 3):
    """
    –ë–µ–∑–ø–µ—á–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞:
    - HTML parse_mode (—â–æ–± –Ω–µ –ª–∞–º–∞–≤—Å—è Markdown),
    - –ø–æ–≤–∞–≥–∞ –¥–æ 429 retry_after,
    - –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ç—Ä–æ—Ç–ª—ñ–Ω–≥ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏.
    """
    global _last_send_ts

    if not BOT_TOKEN or not chat_id:
        log.warning("BOT_TOKEN –∞–±–æ chat_id –ø–æ—Ä–æ–∂–Ω—ñ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é send.")
        return

    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": disable_preview,
    }

    # –ø–µ—Ä-—á–∞—Ç –ª—ñ–º—ñ—Ç
    now = time.time()
    gap = now - _last_send_ts
    if gap < MIN_GAP_BETWEEN_MESSAGES:
        time.sleep(MIN_GAP_BETWEEN_MESSAGES - gap)

    for attempt in range(1, max_retries + 1):
        try:
            r = requests.post(url, json=payload, timeout=25)
            if r.status_code == 200:
                _last_send_ts = time.time()
                return
            if r.status_code == 429:
                try:
                    j = r.json()
                    wait = int(j.get("parameters", {}).get("retry_after", 3))
                except Exception:
                    wait = 3
                wait += 1
                log.error("Bot send 429. Waiting %ss (attempt %d/%d)", wait, attempt, max_retries)
                time.sleep(wait)
                continue
            log.error("Bot send error: %s %s", r.status_code, r.text[:500])
            return
        except Exception as e:
            log.exception("Bot send failed (attempt %d/%d): %s", attempt, max_retries, e)
            time.sleep(1 + attempt * 0.5 + random.random())

def send_bot_message(text_html: str, disable_preview: bool = True):
    if TARGET_CHAT_ID:
        _send_telegram(TARGET_CHAT_ID, text_html, "HTML", disable_preview)

def send_owner(text: str):
    if OWNER_CHAT_ID:
        _send_telegram(OWNER_CHAT_ID, _html(text), "HTML", True)

def _fmt_pair_line(pair: str) -> str:
    return f"<code>{_html(pair)}</code>"

def _upsert_seen_pair(exchange: str, market: str, pair: str, url: Optional[str]) -> bool:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –∑–∞–ø–∏—Å –Ω–æ–≤–∏–π (—Ç–æ–±—Ç–æ —Ç—Ä–µ–±–∞ –ø–æ—Å—Ç–∏—Ç–∏).
    –Ø–∫—â–æ –≤–∂–µ –±–∞—á–∏–ª–∏ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î False.
    """
    ts = int(time.time())
    try:
        cur.execute(
            "INSERT OR IGNORE INTO seen_pairs(exchange, market, pair, url, first_seen_ts) VALUES (?,?,?,?,?)",
            (exchange, market, pair, url or None, ts),
        )
        conn.commit()
        cur.execute("SELECT changes()")
        return cur.fetchone()[0] > 0
    except Exception as e:
        log.exception("seen_pairs insert error: %s", e)
        return True  # –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫ –Ω–µ –±–ª–æ–∫—É—î–º–æ –ø–æ—Å—Ç–∏–Ω–≥

# -------------------- BOT (–∫–æ–º–∞–Ω–¥–∏) -------------------
# --- TEST: /inject <exchange> <spot|futures> <BASE/QUOTE> [start] [end] [channel]
async def cmd_inject(update, context):
    args = (context.args or [])
    if len(args) < 3:
        return await update.message.reply_text(
            "usage:\n"
            "/inject <exchange> <spot|futures> <BASE/QUOTE> [start_text] [end_text] [channel]\n"
            "example:\n"
            "/inject gate spot BTC/USDT \"2025-10-07 13:00 UTC+8\" \"2025-10-07 15:00 UTC+8\" channel"
        )
    ex = args[0].lower()
    mk = args[1].lower()
    pair = args[2].upper()
    start_text = args[3] if len(args) >= 4 else ""
    end_text   = args[4] if len(args) >= 5 else ""
    to_channel = (len(args) >= 6 and args[5].lower() == "channel")

    base, quote = (pair.split("/", 1) + [""])[:2]
    ev = {
        "exchange": ex,
        "market": mk,
        "pair": pair,
        "base": base,
        "quote": quote,
        "url": "",
        "title": "—Ç–µ—Å—Ç–æ–≤–∞ –ø–∞—Ä–∞ (API inject)",
        "start_text": start_text,
        "end_text": end_text,
        "start_dt": None,
    }

    # —Ç–æ–π —Å–∞–º–∏–π —Ä–µ–Ω–¥–µ—Ä, —â–æ —ñ –¥–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö API-—ñ–≤–µ–Ω—Ç—ñ–≤
    lines = []
    title_line = f"‚úÖ <b>{ex.upper()}</b> ‚Äî {mk} –Ω–æ–≤–∞ –ø–∞—Ä–∞ (API)"
    lines.append(title_line)
    lines.append(f"–ü–∞—Ä–∞: <code>{pair}</code>")

    t_lines = []
    if start_text and end_text:
        t_lines.append(f"üïí {start_text} ‚Üí {end_text}")
    elif start_text:
        t_lines.append(f"üïí {start_text}")
    if t_lines:
        lines.extend(t_lines)

    text = "\n".join(lines)
    if to_channel:
        send_bot_message(text, disable_preview=False)
        await update.message.reply_text("‚úÖ injected to channel")
    else:
        await update.message.reply_html(text, disable_web_page_preview=False)

# —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
app.add_handler(CommandHandler("inject", cmd_inject))



async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

async def cmd_sources(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ API-–¥–∂–µ—Ä–µ–ª, —è–∫—ñ –±–æ—Ç –æ–ø–∏—Ç—É—î (–∑–∞ ALL_EXCHANGES).
    """
    try:
        lines = ["–î–∂–µ—Ä–µ–ª–∞ API:"]
        for ex, mk in ALL_EXCHANGES:
            lines.append(f"‚Ä¢ {ex}/{mk}")
        await update.message.reply_text("\n".join(lines))
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–≤–æ–¥—É –¥–∂–µ—Ä–µ–ª: {e}")

async def cmd_testpost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    send_bot_message("<b>‚úÖ Test publish from Crypto Hornet bot.</b>")
    await update.message.reply_text("–í—ñ–¥–ø—Ä–∞–≤–∏–≤ —Ç–µ—Å—Ç —É TARGET_CHAT_ID.")

def _parse_preview_args(args: List[str]) -> Tuple[str, Optional[str], int]:
    """
    –ü—ñ–¥—Ç—Ä–∏–º–∫–∞:
      /preview all 2
      /preview binance 5
      /preview gate futures 3
    """
    ex = "all"
    mk: Optional[str] = None
    limit = 3
    if not args:
        return ex, mk, limit
    # –ø–µ—Ä—à–µ ‚Äî ex|all
    ex = args[0].lower()
    # –¥—Ä—É–≥–µ ‚Äî market –∞–±–æ limit
    if len(args) >= 2:
        if args[1].isdigit():
            limit = int(args[1])
        else:
            mk = args[1].lower()
    # —Ç—Ä–µ—Ç—î ‚Äî limit (—è–∫—â–æ –±—É–ª–æ mk)
    if len(args) >= 3 and args[2].isdigit():
        limit = int(args[2])
    return ex, mk, limit

async def cmd_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /preview all 2
    /preview binance 5
    /preview gate futures 3
    –ü–æ–∫–∞–∑—É—î ¬´–æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–Ω—ñ–º–æ–∫¬ª –≤—ñ–¥ API –±–µ–∑ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.
    """
    ex, mk, limit = _parse_preview_args(context.args or [])
    lines: List[str] = []

    def add_block(title: str, items: Dict[str, str]):
        lines.append(f"<b>{_html(title)}</b>")
        if not items:
            lines.append("‚Äî")
            return
        c = 0
        for pair, url in items.items():
            if c >= limit:
                break
            url = url or ""
            if url:
                lines.append(f"‚Ä¢ {_fmt_pair_line(pair)} ‚Äî <a href=\"{url}\">—Ç–∏–∫–µ—Ä</a>")
            else:
                lines.append(f"‚Ä¢ {_fmt_pair_line(pair)}")
            c += 1
        lines.append("")

    if ex == "all":
        for _ex, _mk in ALL_EXCHANGES:
            snap = api_fetch_snapshot(_ex, _mk)
            add_block(f"{_ex}/{_mk}", snap)
    else:
        # —Ñ—ñ–ª—å—Ç—Ä –ø–æ –±—ñ—Ä–∂—ñ (—ñ, –æ–ø—Ü—ñ–π–Ω–æ, —Ä–∏–Ω–∫—É)
        pairs = [t for t in ALL_EXCHANGES if t[0] == ex and (mk is None or t[1] == mk)]
        if not pairs:
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏. –ü—Ä–∏–∫–ª–∞–¥–∏: /preview all 2 | /preview binance 5 | /preview gate futures 3")
            return
        for _ex, _mk in pairs:
            snap = api_fetch_snapshot(_ex, _mk)
            add_block(f"{_ex}/{_mk}", snap)

    # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ
    try:
        await update.message.reply_html("\n".join(lines), disable_web_page_preview=True)
    except Exception:
        # —è–∫—â–æ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ –∫–∞–Ω–∞–ª—É ‚Äî —à–ª–µ–º–æ –≤–ª–∞—Å–Ω–∏–∫—É
        send_owner("\n".join(lines))

def build_bot_app():
    if not BOT_TOKEN:
        return None
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("ping",     cmd_ping))
    app.add_handler(CommandHandler("sources",  cmd_sources))
    app.add_handler(CommandHandler("testpost", cmd_testpost))
    app.add_handler(CommandHandler("preview",  cmd_preview))
    return app

# -------------------- API LOOP ------------------------
async def poll_api_loop():
    """
    –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª: –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è API –≤—Å—ñ—Ö –±—ñ—Ä–∂, –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –∑–Ω—ñ–º–∫–æ–º,
    —Ñ—ñ–ª—å—Ç—Ä —á–µ—Ä–µ–∑ –ë–î (–∞–Ω—Ç–∏–¥—É–±–ª—å –º—ñ–∂ —Ä–µ—Å—Ç–∞—Ä—Ç–∞–º–∏), —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –ø–æ—Å—Ç —É –∫–∞–Ω–∞–ª.
    """
    # 1) –ø–æ—á–∞—Ç–∫–æ–≤—ñ ¬´–∑–Ω—ñ–º–∫–∏¬ª –≤—Å—ñ—Ö –±—ñ—Ä–∂/—Ä–∏–Ω–∫—ñ–≤
    snapshots: Dict[Tuple[str, str], Dict[str, str]] = api_seed_all()

    # 2) –≥–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª
    while True:
        try:
            for ex, mk in ALL_EXCHANGES:
                # –ø–æ—Ç–æ—á–Ω–∏–π –∑–Ω—ñ–º–æ–∫
                cur_snap = api_fetch_snapshot(ex, mk)  # {pair->url}
                prev_snap = snapshots.get((ex, mk), {})

                # –±—É–¥—É—î–º–æ –ø–æ–¥—ñ—ó (–Ω–æ–≤—ñ –ø–∞—Ä–∏, delist —ñ —Ç.–¥. ‚Äî –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó api_build_events_from_diff)
                events = api_build_events_from_diff(ex, mk, prev_snap, cur_snap)

                # –ø–æ—Å—Ç–∏–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤—ñ (—á–µ—Ä–µ–∑ –ë–î –∞–Ω—Ç–∏–¥—É–±–ª—å)
                for ev in events:
                    pair = ev.get("pair") or ""
                    url  = ev.get("url")  or ""
                    if not pair:
                        continue
                    # —è–∫—â–æ –≤–∂–µ –±—É–ª–æ ‚Äî –Ω–µ –ø–æ—Å—Ç–∏–º–æ
                    if not _upsert_seen_pair(ex, mk, pair, url):
                        continue

                    # —á–∞—Å —è–∫ –Ω–∞ –±—ñ—Ä–∂—ñ (–±–µ–∑ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó), —è–∫—â–æ —î
                    start_text = ev.get("start_text") or ""   # —Ç–µ —Å–∞–º–µ, —â–æ –ø—Ä–∏–π—à–ª–æ –∑ –±—ñ—Ä–∂—ñ
                    end_text   = ev.get("end_text") or ""     # –∫—ñ–Ω–µ—Ü—å, —è–∫—â–æ API –π–æ–≥–æ –¥–∞—î

                    time_lines = []
                    if start_text and end_text:
                        time_lines.append(f"üïí {_html(start_text)} ‚Üí {_html(end_text)}")
                    elif start_text:
                        time_lines.append(f"üïí {_html(start_text)}")

                    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –ø–∞—Ä–∞
                    title_line = f"‚úÖ <b>{_html(ex.upper())}</b> ‚Äî {_html(mk)} –Ω–æ–≤–∞ –ø–∞—Ä–∞ (API)"
                    lines = [title_line, f"–ü–∞—Ä–∞: {_fmt_pair_line(pair)}"]

                    # –¥–æ–¥–∞—î–º–æ —á–∞—Å, —è–∫—â–æ —î
                    if time_lines:
                        lines.extend(time_lines)

                    # –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç—ñ–∫–µ—Ä
                    if url:
                        lines.append(f"üîó –¢—ñ–∫–µ—Ä: <a href=\"{url}\">{_html(url)}</a>")

                    send_bot_message("\n".join(lines), disable_preview=False)


                # –æ–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –∑–Ω—ñ–º–∫—ñ–≤ —É –ø–∞–º'—è—Ç—ñ
                snapshots[(ex, mk)] = cur_snap

                # –Ω–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –±—ñ—Ä–∂–∞–º–∏
                await asyncio.sleep(0.3 + random.random() * 0.3)

            await asyncio.sleep(API_POLL_SEC)

        except Exception as e:
            log.exception("api loop error: %s", e)
            await asyncio.sleep(5)

# -------------------- MAIN ---------------------------
async def main():
    app = build_bot_app()
    api_task = None
    try:
        if app:
            try:
                await app.initialize()
                await app.start()
                try:
                    # drop_pending_updates=True ‚Äî —â–æ–± –Ω–µ —Ç—è–≥–Ω—É—Ç–∏ —Å—Ç–∞—Ä—ñ –∫–æ–º–∞–Ω–¥–∏
                    await app.updater.start_polling(drop_pending_updates=True)
                except Conflict:
                    # –Ø–∫—â–æ —ñ–Ω—à–∏–π —ñ–Ω—Å—Ç–∞–Ω—Å —É–∂–µ –ø–æ–ª–ª—ñ–Ω–≥–∏—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ª–æ–∫–∞–ª—å–Ω–∏–π) ‚Äî –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –∫–æ–º–∞–Ω–¥
                    log.warning("Updater conflict: already polling elsewhere, continue without commands.")
                except Exception as e:
                    raise e
            except Exception as e:
                log.exception("Bot init failed: %s", e)

        # –∑–∞–ø—É—Å–∫–∞—î–º–æ API-—Ü–∏–∫–ª
        api_task = asyncio.create_task(poll_api_loop())

        # —á–µ–∫–∞—î–º–æ –∑–∞–¥–∞—á—ñ
        wait_tasks = [t for t in (api_task,) if t]
        if wait_tasks:
            await asyncio.wait(wait_tasks, return_when=asyncio.FIRST_EXCEPTION)
        else:
            while True:
                await asyncio.sleep(3600)
    finally:
        if api_task:
            try:
                api_task.cancel()
            except Exception:
                pass
        if app:
            try: await app.updater.stop()
            except Exception: pass
            try: await app.stop()
            except Exception: pass
            try: await app.shutdown()
            except Exception: pass

if __name__ == "__main__":
    asyncio.run(main())
