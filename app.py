# -*- coding: utf-8 -*-
from __future__ import annotations

import os
import sys
import time
import random
import yaml
import pytz
import asyncio
import sqlite3
import logging
import requests
from html import escape as html_escape

from typing import Optional
from datetime import datetime, timedelta

from dotenv import load_dotenv

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ø–∞—Ä—Å–µ—Ä–∏ –±—ñ—Ä–∂–æ–≤–∏—Ö –∞–Ω–æ–Ω—Å—ñ–≤
from ann_sources import sources_matrix

# ----------------------- LOGGING -----------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)
log = logging.getLogger("hornet")

# ----------------------- ENV --------------------------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
TARGET_CHAT_ID = os.getenv("TARGET_CHAT_ID", "")
OWNER_CHAT_ID = os.getenv("OWNER_CHAT_ID", "")

TIMEZONE = os.getenv("TIMEZONE", "Europe/Kyiv")
ANN_INTERVAL_SEC = int(os.getenv("ANN_INTERVAL_SEC", "180"))

# –§—ñ–ª—å—Ç—Ä –¥–∞—Ç
POST_DAYS_BACK = int(os.getenv("POST_DAYS_BACK", "1"))   # –ø—Ä–∏–π–º–∞—î–º–æ –≤—ñ–¥ —Å—å–æ–≥–æ–¥–Ω—ñ —ñ N –¥–Ω—ñ–≤ –Ω–∞–∑–∞–¥ (–¥–µ—Ñ. 1 = –≤—á–æ—Ä–∞)
ALLOW_NO_DATE  = os.getenv("ALLOW_NO_DATE", "0") == "1"  # –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –ø–æ—Å—Ç–∏—Ç–∏ –±–µ–∑ –¥–∞—Ç–∏ (–¥–µ—Ñ. 0)

TZ = pytz.timezone(TIMEZONE)

# ----------------------- DB ---------------------------
DB_PATH = os.getenv("DB_PATH", "state.db")  # –Ω–∞ Railway/Render –ø—ñ–¥–∫–ª—é—á–∏ Disk —ñ –ø–æ—Å—Ç–∞–≤ /data/state.db
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur = conn.cursor()

cur.execute("""
CREATE TABLE IF NOT EXISTS seen_announcements(
  url TEXT PRIMARY KEY,
  exchange TEXT,
  market TEXT,
  title TEXT,
  symbols TEXT,
  start_ts INTEGER
)""")
conn.commit()

# ----------------------- UTILS ------------------------
_last_send_ts = 0.0


def send_bot_message(text: str, disable_preview: bool = True, max_retries: int = 3):
    """
    –ë–µ–∑–ø–µ—á–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª:
    - –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ç—Ä–æ—Ç–ª—ñ–Ω–≥ (~1.2s –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏),
    - –ø–æ–≤–∞–≥–∞ –¥–æ 429 retry_after,
    - –¥–æ 3 —Å–ø—Ä–æ–±,
    - –†–û–ó–ú–Ü–¢–ö–ê: HTML (–∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –µ–∫—Ä–∞–Ω—É—î–º–æ).
    """
    global _last_send_ts
    if not BOT_TOKEN or not TARGET_CHAT_ID:
        log.warning("BOT_TOKEN –∞–±–æ TARGET_CHAT_ID –ø–æ—Ä–æ–∂–Ω—ñ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é send.")
        return

    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TARGET_CHAT_ID,
        "text": text,
        "parse_mode": "HTML",               # –≤–∞–∂–ª–∏–≤–æ: HTML, –Ω–µ Markdown
        "disable_web_page_preview": disable_preview,
    }

    # –ø—Ä–æ—Å—Ç–∏–π –ø–µ—Ä-—á–∞—Ç –ª—ñ–º—ñ—Ç ~1.2s
    now = time.time()
    gap = now - _last_send_ts
    min_gap = 1.2
    if gap < min_gap:
        time.sleep(min_gap - gap)

    for attempt in range(1, max_retries + 1):
        try:
            r = requests.post(url, json=payload, timeout=25)
            if r.status_code == 200:
                _last_send_ts = time.time()
                return
            if r.status_code == 429:
                # –ø–æ–≤–∞–∂–∞—î–º–æ retry_after
                try:
                    j = r.json()
                    wait = int(j.get("parameters", {}).get("retry_after", 3))
                except Exception:
                    wait = 3
                wait += 1
                log.error("Bot send 429. Waiting %ss (attempt %d/%d)", wait, attempt, max_retries)
                time.sleep(wait)
                continue
            # —ñ–Ω—à—ñ –∫–æ–¥–∏ ‚Äî –ª–æ–≥ —ñ –≤–∏—Ö—ñ–¥
            log.error("Bot send error: %s %s", r.status_code, r.text[:500])
            return
        except Exception as e:
            log.exception("Bot send failed (attempt %d/%d): %s", attempt, max_retries, e)
            time.sleep(1 + attempt * 0.5 + random.random())


def send_owner(text: str):
    if not BOT_TOKEN or not OWNER_CHAT_ID:
        return
    try:
        requests.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
            json={"chat_id": OWNER_CHAT_ID, "text": text},
            timeout=20
        )
    except Exception:
        pass


def _fmt_dt(dt: Optional[datetime]) -> str:
    return dt.strftime("%Y-%m-%d %H:%M %Z") if dt else "‚Äî"


# -------------------- BOT (–∫–æ–º–∞–Ω–¥–∏) -------------------
async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")


async def cmd_sources(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("sources.yml", "r", encoding="utf-8") as f:
            cfg = yaml.safe_load(f) or {}
        srcs = cfg.get("sources", [])
        if not srcs:
            await update.message.reply_text("sources.yml –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        else:
            msg = "–î–∂–µ—Ä–µ–ª–∞:\n" + "\n".join(f"‚Ä¢ {s}" for s in srcs)
            await update.message.reply_text(msg, disable_web_page_preview=True)
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è sources.yml: {e}")


async def cmd_testpost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    send_bot_message("‚úÖ Test publish from Crypto Hornet bot.")
    await update.message.reply_text("–í—ñ–¥–ø—Ä–∞–≤–∏–≤ —Ç–µ—Å—Ç —É TARGET_CHAT_ID.")


def build_bot_app():
    if not BOT_TOKEN:
        return None
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("ping", cmd_ping))
    app.add_handler(CommandHandler("sources", cmd_sources))
    app.add_handler(CommandHandler("testpost", cmd_testpost))
    return app


# -------------------- ANNOUNCEMENTS LOOP -------------
async def poll_announcements_loop():
    import requests as _rq  # –ª–æ–∫–∞–ª—å–Ω–∏–π –ø—Å–µ–≤–¥–æ–Ω—ñ–º –¥–ª—è except

    while True:
        try:
            # –æ–Ω–æ–≤–ª—é—î–º–æ ¬´–∑—Ä—ñ–∑¬ª —á–∞—Å—É –Ω–∞ –∫–æ–∂–Ω—É –≥–æ–ª–æ–≤–Ω—É —ñ—Ç–µ—Ä–∞—Ü—ñ—é
            now_kiev = datetime.now(TZ)
            cutoff_date = (now_kiev - timedelta(days=POST_DAYS_BACK)).date()

            for fetch in sources_matrix():
                try:
                    data = fetch()  # list[dict]
                    name = getattr(fetch, "__name__", "src")
                    log.info("source %s: %d items", name, len(data) if data else 0)

                    for a in data:
                        url = a["url"]
                        start_dt = a.get("start_dt")  # datetime –∞–±–æ None

                        # ---- –§–Ü–õ–¨–¢–† –î–ê–¢ ----
                        # 1) —è–∫—â–æ –¥–∞—Ç–∏ –Ω–µ–º–∞—î ‚Äî –∞–±–æ —Å–∫—ñ–ø–∞—î–º–æ, –∞–±–æ –¥–æ–∑–≤–æ–ª—è—î–º–æ (—á–µ—Ä–µ–∑ ALLOW_NO_DATE)
                        if start_dt is None and not ALLOW_NO_DATE:
                            log.info("skip (no date) %s", url)
                            continue

                        # 2) —è–∫—â–æ –¥–∞—Ç–∞ —î, –∞–ª–µ —Å—Ç–∞—Ä—ñ—à–∞ –∑–∞ cutoff ‚Äî —Å–∫—ñ–ø–∞—î–º–æ
                        if start_dt is not None:
                            try:
                                dt_date = start_dt.astimezone(TZ).date()
                            except Exception:
                                dt_date = start_dt.date()
                            if dt_date < cutoff_date:
                                log.info("skip old (%s < %s) %s", dt_date, cutoff_date, url)
                                continue
                        # ---- –∫—ñ–Ω–µ—Ü—å —Ñ—ñ–ª—å—Ç—Ä–∞ ----

                        # –∑–∞–ø–∏—Å —ñ –∞–Ω—Ç–∏–¥—É–±–ª—ñ
                        start_ts = int(start_dt.timestamp()) if start_dt else None
                        cur.execute(
                            "INSERT OR IGNORE INTO seen_announcements(url,exchange,market,title,symbols,start_ts) "
                            "VALUES (?,?,?,?,?,?)",
                            (url, a.get("exchange"), a.get("market"), a.get("title"),
                             ",".join(a.get("symbols", [])), start_ts)
                        )
                        conn.commit()

                        # –ø–æ—Å—Ç–∏–º–æ –¢–Ü–õ–¨–ö–ò —è–∫—â–æ —Å–ø—Ä–∞–≤–¥—ñ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
                        cur.execute("SELECT changes()")
                        if cur.fetchone()[0] == 0:
                            continue

                        # ---------- –±—É–¥—É—î–º–æ –±–µ–∑–ø–µ—á–Ω–µ HTML-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ----------
                        ex = html_escape((a.get("exchange") or "").upper())
                        market = html_escape(a.get("market") or "")
                        title = html_escape(a.get("title") or "")
                        src_url = html_escape(a.get("url") or "")

                        # —Å–∏–º–≤–æ–ª–∏ (—Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ç–æ–∫–µ–Ω–∏)
                        raw_syms = a.get("symbols") or []
                        syms = [s for s in raw_syms if s and s.upper() not in {"USDT", "FUTURES"}]

                        lines = [
                            f"üì£ <b>{ex}</b> ‚Äî <b>{market}</b> listing announced",
                            f"üìù {title}",
                        ]
                        if syms:
                            lines.append(
                                "–ü–∞—Ä–∏:\n" + "\n".join(f"‚Ä¢ <code>{html_escape(s)}/USDT</code>" for s in syms)
                            )

                        # –ß–ê–°: —è–∫—â–æ —î ¬´–¥–∏—Å–ø–ª–µ–π¬ª —ñ–∑ —Å–∞–π—Ç—É (start_text) —ñ —î –¥–∞—Ç–∞ (start_dt),
                        # –ø–æ–∫–∞–∑—É—î–º–æ —ó—Ö —Ä–∞–∑–æ–º. –Ü–Ω–∞–∫—à–µ ‚Äî –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç start_text, —ñ–Ω–∞–∫—à–µ ‚Äî –¥–∞—Ç–∞/—á–∞—Å –ö–∏—ó–≤.
                        start_text = a.get("start_text")
                        if start_text and start_dt:
                            kyiv_dt = start_dt.astimezone(TZ) if start_dt.tzinfo else TZ.localize(start_dt)
                            lines.append(f"üïí –°—Ç–∞—Ä—Ç: {html_escape(start_text)} ‚Ä¢ {kyiv_dt.strftime('%Y-%m-%d')}")
                        elif start_text:
                            lines.append(f"üïí –°—Ç–∞—Ä—Ç: {html_escape(start_text)}")
                        else:
                            lines.append(f"üïí –°—Ç–∞—Ä—Ç (–ö–∏—ó–≤): {_fmt_dt(start_dt)}")

                        lines.append(f"üîó –î–∂–µ—Ä–µ–ª–æ: {src_url}")

                        send_bot_message("\n".join(lines))
                        # --------------------------------------------------------

                except _rq.exceptions.HTTPError as e:
                    code = getattr(getattr(e, "response", None), "status_code", None)
                    if code in (403, 503) or "403" in str(e):
                        log.warning("ann-source http %s for %s: %s",
                                    code or "HTTPError", getattr(fetch, "__name__", "src"), e)
                    else:
                        log.exception("ann-source HTTP error for %s: %s",
                                      getattr(fetch, "__name__", "src"), e)

                except _rq.exceptions.RequestException as e:
                    log.warning("ann-source network error for %s: %s",
                                getattr(fetch, "__name__", "src"), e)

                except Exception as e:
                    log.exception("ann-source error for %s: %s",
                                  getattr(fetch, "__name__", "src"), e)

                finally:
                    # –Ω–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ —Å–∞–π—Ç–∞–º–∏, —â–æ–± –º–µ–Ω—à–µ trigger‚Äô–∏—Ç–∏ –∑–∞—Ö–∏—Å—Ç–∏
                    await asyncio.sleep(0.6 + random.random() * 0.7)

            await asyncio.sleep(ANN_INTERVAL_SEC)

        except Exception as e:
            log.exception("ann loop error: %s", e)
            await asyncio.sleep(5)


# -------------------- MAIN ---------------------------
async def main():
    app = build_bot_app()
    ann_task = None
    try:
        if app:
            await app.initialize()
            await app.start()
            # ‚¨á –∫–µ—Ä—É—î–º–æ –ø–æ–ª–ª—ñ–Ω–≥–æ–º —á–µ—Ä–µ–∑ ENV, —â–æ–± –Ω–∞ –ø—Ä–æ–¥—ñ –Ω–µ –±—É–ª–æ 409
            if os.getenv("ENABLE_POLLING", "0") == "1":
                try:
                    await app.updater.start_polling(drop_pending_updates=True)
                except Exception as e:
                    if "Conflict" in str(e):
                        log.warning("Updater conflict: polling elsewhere; running without commands.")
                    else:
                        raise
                except Exception as e:
                    log.exception("Bot init failed: %s", e)

        # —Ü–∏–∫–ª –æ–≥–æ–ª–æ—à–µ–Ω—å
        ann_task = asyncio.create_task(poll_announcements_loop())

        # –æ—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–¥–∞—á
        wait_tasks = [t for t in (ann_task,) if t]
        if wait_tasks:
            await asyncio.wait(wait_tasks, return_when=asyncio.FIRST_EXCEPTION)
        else:
            while True:
                await asyncio.sleep(3600)
    finally:
        if ann_task:
            try:
                ann_task.cancel()
            except Exception:
                pass
        if app:
            try:
                await app.updater.stop()
            except Exception:
                pass
            try:
                await app.stop()
            except Exception:
                pass
            try:
                await app.shutdown()
            except Exception:
                pass


if __name__ == "__main__":
    asyncio.run(main())
