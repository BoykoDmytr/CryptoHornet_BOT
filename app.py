# -*- coding: utf-8 -*-
from __future__ import annotations

import os
import json
import asyncio
import logging
from typing import Dict, Tuple, List, Optional

from datetime import datetime

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# ---- –ù–∞—à—ñ –º–æ–¥—É–ª—ñ ----
from api_sources import (
    api_seed_all,
    api_fetch_snapshot,
    api_build_events_from_diff,
    api_preview,
    api_lookup_listing_time,
    ALL_EXCHANGES,
)
from ann_sources import ann_lookup_listing_time

logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
)
log = logging.getLogger("hornet")

# =========================
#   –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø (ENV)
# =========================
BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise SystemExit("BOT_TOKEN is required")

OWNER_CHAT_ID = int(os.environ.get("OWNER_CHAT_ID", "0") or "0")
TARGET_CHAT_ID = int(os.environ.get("TARGET_CHAT_ID", "0") or "0")

API_SEED_ON_START = os.environ.get("API_SEED_ON_START", "1") not in ("0", "false", "no")
API_PAIRS_INTERVAL_SEC = int(os.environ.get("API_PAIRS_INTERVAL_SEC", "300") or "300")
ANN_INTERVAL_SEC = int(os.environ.get("ANN_INTERVAL_SEC", "450") or "450")
ENABLE_POLLING = os.environ.get("ENABLE_POLLING", "1") not in ("0", "false", "no")

STATE_FILE = os.environ.get("STATE_FILE", "./state.json")

# =========================
#   –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –°–¢–ê–ù–£
# =========================
_state_lock = asyncio.Lock()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
# {
#   "snapshots": { "exchange|market": { "PAIR": "url" } },
#   "posted": { "exchange|market|pair": {
#       "exchange":..., "market":..., "pair":..., "base":..., "quote":..., "url":...,
#       "message_id": 123, "chat_id": -100..., "have_time": false,
#       "start_text": null, "source_url": null, "title": null
#   }}
# }
def _load_state() -> dict:
    if not os.path.exists(STATE_FILE):
        return {"snapshots": {}, "posted": {}}
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"snapshots": {}, "posted": {}}

def _save_state(data: dict) -> None:
    tmp = STATE_FILE + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    os.replace(tmp, STATE_FILE)

# =========================
#   –î–û–ü–û–ú–û–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á
# =========================
def _k(ex: str, mk: str) -> str:
    return f"{ex.lower()}|{mk.lower()}"

def _kp(ex: str, mk: str, pair: str) -> str:
    return f"{ex.lower()}|{mk.lower()}|{pair.upper()}"

def _display_exchange(ex: str) -> str:
    return ex.upper()

def _display_market(mk: str) -> str:
    return "spot" if mk.lower() == "spot" else "futures"

def _format_event_text(ev: dict) -> str:
    """
    –§–æ—Ä–º—É—î —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ Markdown/HTML.
    –ü—ñ–¥—Ç—Ä–∏–º—É—î:
      - ev["time_candidates"]: —Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤ —á–∞—Å—É (—É—Å—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –ø–∞—Ä—Å–µ—Ä–æ–º –≤–∞—Ä—ñ–∞–Ω—Ç–∏)
      - ev["start_text"]: –æ–¥–∏–Ω–∏—á–Ω–∏–π —á–∞—Å (fallback, —è–∫—â–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –Ω–µ–º–∞—î)
    –ù—ñ—á–æ–≥–æ –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ ‚Äî –¥—Ä—É–∫—É—î–º–æ ¬´—è–∫ —î¬ª (UTC/UTC+8 —Ç–æ—â–æ).
    """
    ex = _display_exchange(ev.get("exchange", ""))
    mk = _display_market(ev.get("market", ""))
    pair = ev.get("pair") or f"{ev.get('base','')}/{ev.get('quote','')}"
    url = ev.get("url", "")
    title = ev.get("title") or "–Ω–æ–≤–∞ –ø–∞—Ä–∞ (API)"

    # –∑—ñ–±—Ä–∞—Ç–∏ —á–∞—Å–∏
    times = ev.get("time_candidates") or []
    if not times:
        st = ev.get("start_text")
        if st:
            times = [st]

    # —É–Ω—ñ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –ø–æ—Ä—è–¥–∫—É + —Ç—Ä–∏–º—ñ–Ω–≥
    seen = set()
    uniq_times = []
    for t in times:
        if not isinstance(t, str):
            continue
        t = t.strip()
        if not t or t in seen:
            continue
        seen.add(t)
        uniq_times.append(t)

    lines = []
    lines.append(f"‚úÖ {ex} ‚Äî {mk} {title}")
    lines.append(f"–ü–∞—Ä–∞: {pair}")

    if len(uniq_times) == 1:
        lines.append(f"üïí –°—Ç–∞—Ä—Ç: {uniq_times[0]}")
    elif len(uniq_times) > 1:
        lines.append("üïí –°—Ç–∞—Ä—Ç (–∫–∞–Ω–¥–∏–¥–∞—Ç–∏):")
        for t in uniq_times[:6]:  # –Ω–µ –±—ñ–ª—å—à–µ 6 —Ä—è–¥–∫—ñ–≤, —â–æ–± –Ω–µ —Ä–æ–∑–¥—É–≤–∞—Ç–∏ –ø–æ—Å—Ç
            lines.append(f"‚Ä¢ {t}")

    if url:
        lines.append(f"üîó –¢—ñ–∫–µ—Ä: {url}")

    return "\n".join(lines)


async def _post_event(ctx: ContextTypes.DEFAULT_TYPE, ev: dict) -> Optional[int]:
    chat_id = TARGET_CHAT_ID or OWNER_CHAT_ID
    if not chat_id:
        log.warning("TARGET_CHAT_ID/OWNER_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ñ ‚Äî –ø—Ä–æ–ø—É—Å–∫ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó")
        return None
    text = _format_event_text(ev)
    msg = await ctx.bot.send_message(
        chat_id=chat_id,
        text=text,
        disable_web_page_preview=True,
    )
    return msg.message_id

async def _edit_event(ctx: ContextTypes.DEFAULT_TYPE, posted_rec: dict) -> bool:
    chat_id = posted_rec.get("chat_id")
    msg_id = posted_rec.get("message_id")
    if not chat_id or not msg_id:
        return False
    text = _format_event_text(posted_rec)
    try:
        await ctx.bot.edit_message_text(
            chat_id=chat_id,
            message_id=msg_id,
            text=text,
            disable_web_page_preview=True,
        )
        return True
    except Exception as e:
        log.warning("edit_message_text failed: %s", e)
        return False

async def _enrich_with_times(ev: dict) -> dict:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î ev –∑ –¥–æ–ø–æ–≤–Ω–µ–Ω–∏–º–∏ start_text/title/source_url,
    –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å–ø–æ—á–∞—Ç–∫—É API-–±—ñ—Ä–∂—ñ (api_lookup_listing_time),
    –∞ —è–∫—â–æ –Ω–µ–º–∞ ‚Äî –ø–∞—Ä—Å–µ—Ä –∞–Ω–æ–Ω—Å—ñ–≤ (ann_lookup_listing_time).
    """
    if ev.get("start_text"):
        return ev

    base = ev.get("base") or (ev.get("pair", "").split("/", 1)[0] if ev.get("pair") else "")
    quote = ev.get("quote") or (ev.get("pair", "").split("/", 1)[1] if ev.get("pair") else "")
    exchange = ev.get("exchange", "")
    market = ev.get("market", "")

    # 1) –°–ø—Ä–æ–±–∞ –∑ API –±—ñ—Ä–∂—ñ
    try:
        st_text, _ts_ms = api_lookup_listing_time(exchange, market, base, quote)
        if st_text:
            ev["start_text"] = st_text
            return ev
    except Exception:
        pass

    # 2) –°–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ –∞–Ω–æ–Ω—Å–∏ (–ø–∞—Ä—Å–µ—Ä)
    try:
        st_text2, src_url, title = ann_lookup_listing_time(exchange, market, base, quote)
        if st_text2:
            ev["start_text"] = st_text2
            if title:
                ev["title"] = title
            if src_url:
                ev["source_url"] = src_url
            return ev
    except Exception:
        pass

    return ev

# =========================
#   –ë–ï–ö–ì–†–ê–£–ù–î-–¶–ò–ö–õ–ò
# =========================
async def api_pairs_loop(app):
    """
    –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª:
    - –∑–Ω—ñ–º–∞—î —Å–≤—ñ–∂—ñ —Å–Ω–∞–ø—à–æ—Ç–∏,
    - —Ä–∞—Ö—É—î –¥–µ–ª—å—Ç—É,
    - –Ω–∞ –Ω–æ–≤—ñ –ø–∞—Ä–∏ —Ä–æ–±–∏—Ç—å –ø–æ—Å—Ç; –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç–æ–º –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ —á–∞—Å (API/–∞–Ω–æ–Ω—Å),
    - –∑–∞–ø–∏—Å—É—î –≤ state.
    """
    await asyncio.sleep(2.0)  # –∫–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É
    while True:
        try:
            async with _state_lock:
                state = _load_state()
                snapshots: Dict[str, Dict[str, str]] = state.get("snapshots", {})
                posted: Dict[str, dict] = state.get("posted", {})

            for ex, mk in ALL_EXCHANGES:
                key = _k(ex, mk)
                prev = snapshots.get(key, {}) or {}
                cur = api_fetch_snapshot(ex, mk)

                events = api_build_events_from_diff(ex, mk, prev, cur)
                # –∑–±–∞–≥–∞—Ç–∏—Ç–∏ —á–∞—Å–æ–º –¥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
                for ev in events:
                    ev = await _enrich_with_times(ev)
                    kk = _kp(ev["exchange"], ev["market"], ev["pair"])
                    if kk in posted:
                        continue  # –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —Ä–µ—Å—Ç–∞—Ä—Ç—ñ–≤/–≥–æ–Ω–æ–∫
                    # –ø–æ—Å—Ç
                    msg_id = await _post_event(app, ev)
                    if not msg_id:
                        continue
                    rec = dict(ev)
                    rec["message_id"] = msg_id
                    rec["chat_id"] = TARGET_CHAT_ID or OWNER_CHAT_ID
                    rec["have_time"] = bool(ev.get("start_text"))
                    async with _state_lock:
                        state = _load_state()
                        state.setdefault("posted", {})[kk] = rec
                        state.setdefault("snapshots", {})[key] = cur
                        _save_state(state)

                # –æ–Ω–æ–≤–∏—Ç–∏ —Å–Ω–∞–ø—à–æ—Ç –Ω–∞–≤—ñ—Ç—å –±–µ–∑ –Ω–æ–≤–∏—Ö –ø–æ–¥—ñ–π
                async with _state_lock:
                    state = _load_state()
                    state.setdefault("snapshots", {})[key] = cur
                    _save_state(state)

                await asyncio.sleep(0.2)

        except Exception as e:
            log.exception("api_pairs_loop error: %s", e)

        await asyncio.sleep(API_PAIRS_INTERVAL_SEC)


async def ann_enrich_loop(app):
    """
    –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –≤–∂–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –±–µ–∑ —á–∞—Å—É –π –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –¥–æ–±—Ä–∞—Ç–∏ start_text –∑ –∞–Ω–æ–Ω—Å—ñ–≤/API.
    –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî —Ä–µ–¥–∞–≥—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    await asyncio.sleep(5.0)
    while True:
        try:
            async with _state_lock:
                state = _load_state()
                posted: Dict[str, dict] = state.get("posted", {})

            changed = False
            for kk, rec in list(posted.items()):
                if rec.get("have_time"):
                    continue
                # –∑–±–∞–≥–∞—á–µ–Ω–Ω—è
                rec2 = await _enrich_with_times(dict(rec))
                if rec2.get("start_text"):
                    # —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ—Å—Ç
                    ok = await _edit_event(app, rec2)
                    if ok:
                        rec2["have_time"] = True
                        async with _state_lock:
                            state = _load_state()
                            state.setdefault("posted", {})[kk] = rec2
                            _save_state(state)
                        changed = True
                await asyncio.sleep(0.05)

            if not changed:
                log.info("ann_enrich_loop: –Ω–µ–º–∞—î —â–æ –¥–æ–ø–æ–≤–Ω—é–≤–∞—Ç–∏ (pending=0?)")

        except Exception as e:
            log.exception("ann_enrich_loop error: %s", e)

        await asyncio.sleep(ANN_INTERVAL_SEC)

# =========================
#   –ö–û–ú–ê–ù–î–ò –ë–û–¢–ê
# =========================
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Crypto Hornet API –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. /preview, /inject, /seed")

async def cmd_seed(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    # —Ä—É—á–Ω–∏–π seed —É—Å—ñ—Ö –±—ñ—Ä–∂
    snaps = api_seed_all()
    async with _state_lock:
        state = _load_state()
        for (ex, mk), snap in snaps.items():
            state.setdefault("snapshots", {})[_k(ex, mk)] = snap
        _save_state(state)
    await update.message.reply_text("‚úÖ Seed –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

async def cmd_preview(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    /preview [exchange|all] [market|all] [limit]
    –ø—Ä–∏–∫–ª–∞–¥–∏:
      /preview all all 2
      /preview gate futures 3
      /preview binance spot
    """
    args = (ctx.args or [])
    ex = (args[0].lower() if len(args) >= 1 else "all")
    mk = (args[1].lower() if len(args) >= 2 else "all")
    limit = int(args[2]) if len(args) >= 3 and args[2].isdigit() else 2

    pairs = []
    if ex == "all":
        pairs = list(ALL_EXCHANGES)
    else:
        if mk == "all":
            pairs = [(ex, "spot"), (ex, "futures")]
        else:
            pairs = [(ex, mk)]

    count = 0
    for e, m in pairs:
        try:
            preview = api_preview(e, m, limit=limit)
            for ev in preview:
                ev = await _enrich_with_times(ev)
                text = _format_event_text(ev)
                await update.message.reply_text(text, disable_web_page_preview=True)
                count += 1
        except Exception as e:
            await update.message.reply_text(f"{e} for {e}/{m}")
        await asyncio.sleep(0.2)

    if count == 0:
        await update.message.reply_text("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø—Ä–µ–≤‚Äô—é.")

async def cmd_inject(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–∞–Ω—Ü—é–≥–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.
    –í–∞—Ä—ñ–∞–Ω—Ç–∏:
      /inject                 -> –≤—ñ–∑—å–º–µ –ø–µ—Ä—à—É –ø–∞—Ä—É –∑ gate/futures (—É–º–æ–≤–Ω–æ)
      /inject binance spot BTC USDT
    """
    args = ctx.args or []
    ex = args[0].lower() if len(args) >= 1 else "gate"
    mk = args[1].lower() if len(args) >= 2 else "futures"
    base = args[2].upper() if len(args) >= 3 else "BTC"
    quote = args[3].upper() if len(args) >= 4 else "USDT"

    # —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ url –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —Å–Ω–∞–ø—à–æ—Ç—ñ
    async with _state_lock:
        state = _load_state()
        cur = state.get("snapshots", {}).get(_k(ex, mk), {}) or {}
    url = cur.get(f"{base}/{quote}") or f"https://example.com/{ex}/{base}_{quote}"
    ev = {
        "exchange": ex,
        "market": mk,
        "pair": f"{base}/{quote}",
        "base": base,
        "quote": quote,
        "url": url,
        "title": "—Ç–µ—Å—Ç–æ–≤–∞ –ø–∞—Ä–∞ (INJECT)",
        "start_text": None,
    }
    ev = await _enrich_with_times(ev)
    msg_id = await _post_event(ctx, ev)
    if not msg_id:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ—Å—Ç.")
        return
    # –∑–±–µ—Ä–µ–≥—Ç–∏ —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–µ
    rec = dict(ev)
    rec["message_id"] = msg_id
    rec["chat_id"] = TARGET_CHAT_ID or OWNER_CHAT_ID
    rec["have_time"] = bool(ev.get("start_text"))
    kk = _kp(ex, mk, f"{base}/{quote}")
    async with _state_lock:
        state = _load_state()
        state.setdefault("posted", {})[kk] = rec
        _save_state(state)
    await update.message.reply_text(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ. message_id={msg_id}")

# =========================
#   MAIN
# =========================
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("seed", cmd_seed))
    app.add_handler(CommandHandler("preview", cmd_preview))
    app.add_handler(CommandHandler("inject", cmd_inject))

    # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π seed (–æ–ø—Ü—ñ–π–Ω–æ)
    if API_SEED_ON_START:
        snaps = api_seed_all()
        async with _state_lock:
            state = _load_state()
            for (ex, mk), snap in snaps.items():
                state.setdefault("snapshots", {})[_k(ex, mk)] = snap
            _save_state(state)

    # –§–æ–Ω–æ–≤—ñ —Ü–∏–∫–ª–∏
    #app.job_queue.run_repeating(lambda *_: None, interval=3600, first=0)  # dummy, —â–æ–± job_queue —ñ—Å–Ω—É–≤–∞–≤
    asyncio.create_task(api_pairs_loop(app))
    asyncio.create_task(ann_enrich_loop(app))

    if ENABLE_POLLING:
        await app.initialize()
        await app.start()
        try:
            await app.updater.start_polling(allowed_updates=Update.ALL_TYPES)
            await asyncio.Event().wait()
        finally:
            await app.updater.stop()
            await app.stop()
            await app.shutdown()
    else:
        # –Ø–∫—â–æ polling –≤–∏–º–∫–Ω–µ–Ω–æ ‚Äî –≤—Å–µ –æ–¥–Ω–æ –∫—Ä—É—Ç–∏–º–æ —Ñ–æ–Ω-—Ü–∏–∫–ª–∏
        await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
